AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Template for automated service lambdas'
Globals:
  Function:
    Runtime: python3.12
    Timeout: 3
    MemorySize: 128
    Architectures:
    - x86_64
    LoggingConfig:
      LogFormat: JSON
Parameters:
  bucketName:
    Type: String
    Description: The name of the S3 bucket
  environment:
    Type: String
    Description: The environment name
  app:
    Type: String
    Description: App name used for tagging and naming
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:
        Fn::Sub: ${app}-lambda-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
      Policies:
      - PolicyName:
          Fn::Sub: ${app}-lambda-execution-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - ssm:GetParametersByPath
            - ssm:GetParameter
            Effect: Allow
            Resource:
              Fn::Sub: arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:*
      - PolicyName:
          Fn::Sub: ${app}-metrics-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - cloudwatch:PutMetricData
            Effect: Allow
            Resource: "*"
            Condition:
              StringLike:
                cloudwatch:namespace:
                  Fn::Sub: "${app}/*"
      - PolicyName:
          Fn::Sub: ${app}-S3-access-policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
                - "s3:GetObject"
              Resource:
                - Fn::Sub: arn:aws:s3:::${bucketName}/*
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
    Metadata:
      SamResourceId: LambdaRole
  DependancyLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName:
        Fn::Sub: ${app}-lambda-dependencies
      Description:
        Fn::Sub: Dependencies for the ${app} lambda functions
      ContentUri:
        Bucket: { Ref: bucketName }
        Key: lambdas/dependencies
      CompatibleRuntimes:
      - python3.12
      RetentionPolicy: Delete
    Metadata:
      BuildMethod: python3.12
      SamResourceId: DependancyLayer
  ConnectLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/ConnectFunction
      RetentionInDays: 7
  CheckLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/CheckFunction
      RetentionInDays: 7
  MetricsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/MetricsFunction
      RetentionInDays: 7
  ConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: ConnectFunction
      Handler: connect.lambda_handler
      CodeUri:
        Bucket: { Ref: bucketName }
        Key: lambdas/ConnectFunction
      Layers:
      - Ref: DependancyLayer
      Timeout: 30
      MemorySize: 1024
      Environment:
        Variables:
          TZ: Europe/London
          ssm_prefix:
            Ref: app
          bucket:
            Ref: bucketName
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
    Metadata:
      SamResourceId: ConnectFunction
  CheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: CheckFunction
      Handler: check.lambda_handler
      CodeUri:
        Bucket: { Ref: bucketName }
        Key: lambdas/CheckFunction
      Layers:
      - Ref: DependancyLayer
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          TZ: Europe/London
          ssm_prefix:
            Ref: app
          bucket:
            Ref: bucketName
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Events:
        InvocationLevel:
          Type: Schedule
          Properties:
            Schedule: cron(0/10 * * * ? *)
  MetricsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: MetricsFunction
      Handler: metrics.lambda_handler
      CodeUri:
        Bucket: { Ref: bucketName }
        Key: lambdas/MetricsFunction
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          TZ: Europe/London
          app:
            Ref: app
          bucket:
            Ref: bucketName
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Events:
        # We call this twice - once to collect metrics from the day before, and once
        # to kick the database but not collect metrics, as there is some delay
        # before the database notices the new data.
        InvocationLevel1:
          Type: Schedule
          Properties:
            Schedule: cron(0 1 * * ? *)
            Input:
              day_range: [1]
        InvocationLevel2:
          Type: Schedule
          Properties:
            Schedule: cron(0 2 * * ? *)
            Input:
              day_range: []
    Metadata:
      SamResourceId: CheckFunction
  AthenaReadOnlyUser:
    Type: AWS::IAM::User
    Properties:
      UserName: AthenaReadOnlyUser
  AthenaReadOnlyUserPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: AthenaReadOnlyPolicy
      Users:
        - Ref: AthenaReadOnlyUser
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # S3 permissions: allowing bucket listing and reading objects under the specified folder.
          - Sid: "S3ListBucket"
            Effect: Allow
            Action:
              - "s3:GetBucketLocation"
              - "s3:ListBucket"
            Resource:
              - Fn::Sub: "arn:aws:s3:::${bucketName}"
          - Sid: "S3GetObjects"
            Effect: Allow
            Action:
              - "s3:GetObject"
            Resource:
              - Fn::Sub: "arn:aws:s3:::${bucketName}/metrics/*"
          - Sid: "S3PutObjects"
            Effect: Allow
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
            Resource:
              - Fn::Sub: "arn:aws:s3:::${bucketName}/athena-results/*"
          # Athena permissions: allowing the user to run and monitor queries.
          - Sid: "AthenaReadAccess"
            Effect: Allow
            Action:
              - "athena:StartQueryExecution"
              - "athena:GetQueryExecution"
              - "athena:GetQueryResults"
            Resource: "*"
          # Glue permissions: allowing the user to read the Data Catalog metadata (database/table detail).
          #- Sid: "GlueReadAccess"
          #  Effect: Allow
          #  Action:
          #    - "glue:GetDatabase"
          #    - "glue:GetTable"
          #  Resource: "*"
